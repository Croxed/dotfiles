#!/usr/bin/env bash
#
# ufetch - tiny system info for *nix
#

# FUNCTIONS {{{
getos() {
    case "$(uname)" in
        "Linux")   os="Linux" ;;
        "Darwin")  os="$(sw_vers -productName)" ;;
        *"BSD" | "DragonFly") os="BSD" ;;
        "CYGWIN"*) os="Windows" ;;
        "SunOS") os="Solaris" ;;
        *) printf "%s\n" "Unknown OS detected: $(uname)"; exit 1 ;;
    esac
}

getdistro() {
    [ "$distro" ] && return

    case "$os" in
        "Linux" )
            if type -p lsb_release >/dev/null 2>&1; then
                distro="$(lsb_release -d 2>/dev/null | awk -F ':' '/Description/ {printf $2}' | cut -f 2)"

            elif type -p crux >/dev/null 2>&1; then
                distro="$(crux)"

            else
                distro="$(awk -F 'NAME=' '/^NAME=/ {printf $2}' /etc/*ease)"
                distro="${distro//\"}"

                # Workaround for distros that store the value differently.
                [ -z "$distro" ] && distro="$(awk -F 'TAILS_PRODUCT_NAME="|"' '/^TAILS_PRODUCT_NAME=/ {printf $2}' /etc/*ease)"
                [ -z "$distro" ] && distro="$(awk '/BLAG/ {print $1; exit}' /etc/*ease)"
            fi
        ;;

        "Mac OS X")
            osx_version="$(sw_vers -productVersion)"
            osx_build="$(sw_vers -buildVersion)"

            case "${osx_version%.*}" in
                "10.4") codename="Mac OS X Tiger" ;;
                "10.5") codename="Mac OS X Leopard" ;;
                "10.6") codename="Mac OS X Snow Leopard" ;;
                "10.7") codename="Mac OS X Lion" ;;
                "10.8") codename="OS X Mountain Lion" ;;
                "10.9") codename="OS X Mavericks" ;;
                "10.10") codename="OS X Yosemite" ;;
                "10.11") codename="OS X El Capitan" ;;
                "10.12") codename="macOS Sierra" ;;
                *) codename="Mac OS X" ;;
            esac
            distro="$codename $osx_version"
        ;;

        "iPhone OS")
            distro="iOS $(sw_vers -productVersion)"

            # "uname -m" doesn't print architecture on iOS so we force it off.
            os_arch="off"
        ;;

        "BSD")
            distro="$(uname -s)"
            distro="${distro/DragonFly/DragonFlyBSD}"

            # Workaround for PCBSD as uname still displays FreeBSD.
            [ -f "/etc/pcbsd-lang" ] && distro="PCBSD"

            # Workaround for PacBSD as uname displays FreeBSD.
            [ -f "/etc/pacbsd-release" ] && distro="PacBSD"
        ;;

        "Windows")
            distro="$(wmic os get Caption /value)"

            # Strip crap from the output of wmic
            distro="${distro/Caption'='}"
            distro="${distro/Microsoft }"
        ;;

        "Solaris")
            distro="$(nawk 'NR==1{gsub(/^ \t]+|[ \t]+$/,""); printf $1 " " $2;}' /etc/release)"
        ;;
    esac
}

getpackages() {
    case "$os" in
        "Linux" | "iPhone OS")
            type -p pacman >/dev/null 2>&1 && \
                packages="$(pacman -Qq --color never | wc -l)"

            type -p dpkg >/dev/null 2>&1 && \
                packages="$((packages+=$(dpkg --get-selections | grep -cv deinstall$)))"

            type -p /sbin/pkgtool >/dev/null 2>&1 && \
                packages="$((packages+=$(ls -1 /var/log/packages | wc -l)))"

            type -p rpm >/dev/null 2>&1 && \
                packages="$((packages+=$(rpm -qa | wc -l)))"

            type -p xbps-query >/dev/null 2>&1 && \
                packages="$((packages+=$(xbps-query -l | wc -l)))"

            type -p pkginfo >/dev/null 2>&1 && \
                packages="$((packages+=$(pkginfo -i | wc -l)))"

            type -p pisi >/dev/null 2>&1 && \
                packages="$((packages+=$(pisi list-installed | wc -l)))"

            type -p pkg >/dev/null 2>&1 && \
                packages="$((packages+=$(ls -1 /var/db/pkg | wc -l)))"

            type -p emerge >/dev/null 2>&1 && \
                packages="$((packages+=$(ls -d /var/db/pkg/*/* | wc -l)))"

            type -p nix-env >/dev/null 2>&1 && \
                packages="$((packages+=$(ls -d -1 /nix/store/*/ | wc -l)))"

            type -p apk >/dev/null 2>&1 && \
                packages="$((packages+=$(apk info | wc -l)))"

            type -p pacman-g2 >/dev/null 2>&1 && \
                packages="$((packages+=$(pacman-g2 -Q | wc -l)))"

            type -p cave >/dev/null 2>&1 && \
                packages="$((packages+=$(ls -d -1 /var/db/paludis/repositories/cross-installed/*/data/* /var/db/paludis/repositories/installed/data/* | wc -l)))"
        ;;

        "Mac OS X")
            [ -d "/usr/local/bin" ] && \
                packages="$(($(ls -l /usr/local/bin/ | grep -v "\(../Cellar/\|brew\)" | wc -l) - 1))"

            type -p port >/dev/null 2>&1 && \
                packages="$((packages + $(port installed 2>/dev/null | wc -l) - 1))"

            type -p brew >/dev/null 2>&1 && \
                packages="$((packages + $(find /usr/local/Cellar -maxdepth 1 2>/dev/null | wc -l) - 1))"

            type -p pkgin >/dev/null 2>&1 && \
                packages="$((packages + $(pkgin list 2>/dev/null | wc -l)))"
        ;;

        "BSD")
            case "$distro" in
                # PacBSD has both pacman and pkg, but only pacman is used
                "PacBSD"*) packages="$(pacman -Qq --color never | wc -l)" ;;

                *)
                    if type -p pkg_info >/dev/null 2>&1; then
                        packages="$(pkg_info | wc -l)"
                    elif type -p pkg >/dev/null 2>&1; then
                        packages="$(pkg info | wc -l)"
                    fi
                ;;
            esac
        ;;

        "Windows")
            packages="$(cygcheck -cd | wc -l)"

            # Count chocolatey packages
            [ -d "/cygdrive/c/ProgramData/chocolatey/lib" ] && \
                packages="$((packages+=$(ls -1 /cygdrive/c/ProgramData/chocolatey/lib | wc -l)))"
        ;;

        "Solaris")
            packages="$(pkg list | wc -l)"
        ;;
    esac
}

getwm() {
    if [ -n "$DISPLAY" ] && [ "$os" != "Mac OS X" ]; then
        id="$(xprop -root -notype | awk '$1=="_NET_SUPPORTING_WM_CHECK:"{print $5}' 2>/dev/null)"
        wm="$(xprop -id "$id" -notype -f _NET_WM_NAME 8t 2>/dev/null)"
        wm="${wm/*_NET_WM_NAME = }"
        wm="${wm/\"}"
        wm="${wm/\"*}"

        # Fallback for Wayland wms
        case "$wm" in
            "xwlc")
                wm="$(ps -e | grep -m 1 -oE "sway|orbment|velox|orbital")"
                [ "$version" -ge 4 ] && wm="${wm^}"
            ;;
        esac

    else
        case "$os" in
            "Mac OS X") wm="Quartz Compositor" ;;
            "Windows")  wm="Explorer" ;;
        esac
    fi
}

getshell() {
    shell="${SHELL##*/}"
    shell+=" "
    case "$shell" in
        *"bash"*)
            shell+="$(bash --version | head -n 1)"
            shell="${shell/ *, version}"
    ;;

        *"zsh"*)
            shell+="$(zsh --version)"
            shell="${shell/ zsh}"
        ;;

        *"mksh"* | *"ksh")
            shell+="$("$SHELL" -c 'printf "%s" "$KSH_VERSION"')"
            shell="${shell/ * KSH}"
        ;;

        *"tcsh"* | *"csh"*)
            shell+="$("$SHELL" --version)"
            shell="${shell/tcsh}"
            shell="${shell/\(*}"
        ;;

        *"fish"*)
            shell+="$("$SHELL" -c 'printf "%s" "$FISH_VERSION"')"
        ;;
    esac
    shell="${shell/\(*\)}"
}

getterm() {
    # Check $PPID for terminal emulator.
    case "$os" in
        "Mac OS X")
            # Workaround for OS X systems that
            # don't support the block below.
            case "$TERM_PROGRAM" in
                "iTerm.app") term="iTerm2" ;;
                "Terminal.app") term="Apple Terminal" ;;
                *) term="${TERM_PROGRAM/\.app}" ;;
            esac
            return
        ;;

        "Windows")
            parent="$(ps -p ${1:-$PPID} | awk '{printf $2}')"
            parent="${parent/'PPID'}"

            name="$(ps -p $parent | awk '{printf $8}')"
            name="${name/'COMMAND'}"
            name="${name/*\/}"
        ;;

        *)
            parent="$(ps -p ${1:-$PPID} -o ppid=)"
            name="$(ps -p $parent -o comm=)"
        ;;
    esac
    
    if [ -z "$term" ]; then
      term="$(perl -lpe 's/\0/ /g' /proc/$(xdotool getwindowpid $(xdotool getactivewindow))/cmdline)"
    fi

   # case "${name// }" in
   #     "${SHELL/*\/}" | *"sh" | "tmux" | "screen") getterm "$parent" ;;
   #     "login" | "init") term="$(tty)"; term="${term/*\/}" ;;
   #     "ruby" | "1" | "systemd" | "sshd" | "python"*) unset term ;;
   #     "gnome-terminal-") term="gnome-terminal" ;;
   #     *) term="$name" ;;
   # esac
}

# }}}


## INFO

getos
getdistro
getpackages
getshell
getwm
getterm
name="$(whoami)"
HOST="$(hostname)"
KERNEL="$(uname -srm)"
UPTIME="$(uptime | awk -F, '{sub(".*up ",x,$1);print $1}' | sed -e 's/^[ \t]*//')"
# shell is already defined

## DEFINE COLORS
c00=$'\e[0;30m'
c01=$'\e[0;31m'
c02=$'\e[0;32m'
c03=$'\e[0;33m'
c04=$'\e[0;34m'
c05=$'\e[0;35m'
c06=$'\e[0;36m'
c07=$'\e[0;37m'
c08=$'\e[1;30m'
c09=$'\e[1;31m'
c10=$'\e[1;32m'
c11=$'\e[1;33m'
c12=$'\e[1;34m'
c13=$'\e[1;35m'
c14=$'\e[1;36m'
c15=$'\e[1;37m'

f0=$'\e[1;30m'
f1=$'\e[1;37m'
f2=$'\e[0;37m'

## OUTPUT

clear

cat <<EOF

    ${f1}hello ${c06}${name}${f1}, i'm ${c06}${HOST}


    ${c06}▉▉  |
    ${c11}  ▉▉| ${f1}OS ${f0}........... $f2${distro}
    ${c13}▉▉  | ${f1}kernel ${f0}....... $f2${KERNEL}
    ${c02}  ▉▉| ${f1}uptime ${f0}....... $f2${UPTIME}
    ${c14}▉▉  | ${f1}packages ${f0}..... $f2${packages}
    ${c15}  ▉▉| ${f1}wm ${f0}........... $f2${wm}
    ${c12}▉▉  | ${f1}shell ${f0}........ $f2${shell}
    ${c03}  ▉▉| ${f1}terminal ${f0}..... $f2${term}
    ${c13}▉▉  |

EOF
