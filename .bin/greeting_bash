#! /usr/bin/env bash
# shellcheck disable=SC2086,SC2048
trim() {
    # Usage: trim_all "   example   string    "
    set -f
    set -- $*
    printf '%s\n' "$*"
    set +f
}

trim_quotes() {
    trim_output="${1//\'}"
    trim_output="${trim_output//\"}"
    printf "%s" "$trim_output"
}

get_os() {
    case "$(uname)" in
        "Linux")   os="Linux" ;;
        "Darwin")  os="$(sw_vers -productName)" ;;
        *"BSD" | "DragonFly") os="BSD" ;;
        "CYGWIN"*) os="Windows" ;;
        "SunOS") os="Solaris" ;;
        *) printf "%s\n" "Unknown OS detected: $(uname)"; exit 1 ;;
    esac
}

get_ppid() {
    # Get parent process ID of PID.
    case "$os" in
        "Windows")
            ppid="$(ps -p "${1:-$PPID}" | awk '{printf $2}')"
            ppid="${ppid/'PPID'}"
            ;;
        "Linux")
            ppid="$(grep -i -F "PPid:" "/proc/${1:-$PPID}/status")"
            ppid="$(trim "${ppid/PPid:}")"
            ;;
        *)
            ppid="$(ps -p "${1:-$PPID}" -o ppid=)"
            ;;
    esac
    printf "%s" "$ppid"
}

get_process_name() {
    # Get PID name.
    case "$os" in
        "Windows")
            name="$(ps -p "${1:-$PPID}" | awk '{printf $8}')"
            name="${name/'COMMAND'}"
            name="${name/*\/}"
            ;;
        "Linux")
            name="$(< "/proc/${1:-$PPID}/comm")"
            ;;
        *)
            name="$(ps -p "${1:-$PPID}" -o comm=)"
            ;;
    esac
    printf "%s" "$name"
}

get_distro() {
    get_os
    [[ "$distro" ]] && return

    case "$os" in
        "Linux" | "BSD" | "MINIX")
            if type -p lsb_release >/dev/null; then
                distro="$(lsb_release -sd)"
            elif [[ -f "/etc/os-release" || -f "/usr/lib/os-release" ]]; then
                # Source the os-release file
                for file in /etc/os-release /usr/lib/os-release; do
                    source "$file" 2>/dev/null && break
                done
                # Workarounds for distros that go against the os-release standard.
                [[ -z "${distro// }" ]] && distro="$(awk '/BLAG/ {print $1; exit}' /etc/os-release /usr/lib/os-release)"
                [[ -z "${distro// }" ]] && distro="$(awk -F'=' '{print $2; exit}' /etc/os-release /usr/lib/os-release)"
            else
                for release_file in /etc/*-release; do
                    distro+="$(< "$release_file")"
                done
                if [[ -z "$distro" ]]; then
                    distro="${distro/DragonFly/DragonFlyBSD}"

                    # Workarounds for FreeBSD based distros.
                    [[ -f "/etc/pcbsd-lang" ]] && distro="PCBSD"
                    [[ -f "/etc/rc.conf.trueos" ]] && distro="TrueOS"
                    [[ -f "/etc/pacbsd-release" ]] && distro="PacBSD" # /etc/pacbsd-release is an empty file
                fi
            fi
            distro="$(trim_quotes "$distro")"
            ;;

        "Mac OS X")
            distro="macOS"
            ;;
    esac

    [[ -z "$distro" ]] && distro="$os (Unknown)"
}

get_shell() {
    shell_path="off"
    case "$shell_path" in
        "on")  shell="$SHELL " ;;
        "off") shell="${SHELL##*/} " ;;
    esac
    shell_version="on"
    if [[ "$shell_version" == "on" ]]; then
        case "${SHELL##*/}" in
            "bash") shell+="${BASH_VERSION/-*}" ;;
            "sh" | "ash" | "dash") ;;
            *)
                shell+="$("$SHELL" --version 2>&1)"
                shell="${shell/ ${SHELL##*/}}"
                ;;
        esac

        # Remove unwanted info.
        shell="${shell/, version}"
        shell="${shell/xonsh\//xonsh }"
        shell="${shell/options*}"
        shell="${shell/\(*\)}"
    fi
}

get_ppid() {
    # Get parent process ID of PID.
    ppid="$(grep -i -F "PPid:" "/proc/${1:-$PPID}/status")"
    ppid="$(trim "${ppid/PPid:}")"
    printf "%s" "$ppid"
}

get_process_name() {
    # Get PID name.
    case "$os" in
        "Windows")
            name="$(ps -p "${1:-$PPID}" | awk '{printf $8}')"
            name="${name/'COMMAND'}"
            name="${name/*\/}"
        ;;
        "Linux")
            name="$(< "/proc/${1:-$PPID}/comm")"
        ;;
        *)
            name="$(ps -p "${1:-$PPID}" -o comm=)"
        ;;
    esac
    printf "%s" "$name"
}

get_term() {
    # Workaround for macOS systems that
    # don't support the block below.
    case "$TERM_PROGRAM" in
        "iTerm.app") term="iTerm2" ;;
        "Terminal.app") term="Apple Terminal" ;;
        "Hyper") term="HyperTerm" ;;
        *) term="${TERM_PROGRAM/\.app}" ;;
    esac

    # Check $PPID for terminal emulator.
    while [[ -z "$term" ]]; do
        parent="$(get_ppid "$parent")"
        name="$(get_process_name "$parent")"

        case "${name// }" in
            "${SHELL/*\/}" | *"sh" | "tmux"* | "screen" | "su"*) ;;
            "login"* | *"Login"* | "init" | "(init)") term="$(tty)" ;;
            "ruby" | "1" | "systemd" | "sshd"* | "python"* | "USER"*"PID"*) break ;;
            "gnome-terminal-") term="gnome-terminal" ;;
            *) term="${name##*/}" ;;
        esac
    done
}
get_term
get_distro
get_shell
UPTIME="$(uptime | awk -F, '{sub(".*up ",x,$1);print $1}' | sed -e 's/^[ \t]*//')"

c00=$'\e[0;30m'
c01=$'\e[0;31m'
c02=$'\e[0;32m'
c03=$'\e[0;33m'
c04=$'\e[0;34m'
c05=$'\e[0;35m'
c06=$'\e[0;36m'
c07=$'\e[0;37m'
c08=$'\e[1;30m'
c09=$'\e[1;31m'
c10=$'\e[1;32m'
c11=$'\e[1;33m'
c12=$'\e[1;34m'
c13=$'\e[1;35m'
c14=$'\e[1;36m'
c15=$'\e[1;37m'

f0=$'\e[1;30m'
f1=$'\e[1;37m'
f2=$'\e[0;37m'
c0=$'\e[00m'


cat <<EOF
${c14}$(figlet -f colossal $distro)${c0} 
${f1}hello ${c06}$(whoami)${f1}, i'm ${c06}$(hostname -s)
${f1}i've been awake for ${c06}${UPTIME} 

${f1}shell ${f0}......... ${c06}${shell}
${f1}terminal ${f0}...... ${c06}${term}

EOF
